from telebot import TeleBot
from telebot.types import Message
import sqlite3
import threading
from date_formatter import format_date_russian


class MafiaBot:
    def __init__(self, token: str):
        self.bot = TeleBot(token)
        self.conn = sqlite3.connect('event.db', check_same_thread=False, timeout=10)
        self.lock = threading.Lock()
        self.create_tables()
        self.setup_handlers()
        self.date = 'default date'
        self.time = '18:00'
        self.location = 'https://maps.app.goo.gl/LLHVqSW4Do9ALm5R8?g_st=atm'
        self.registration_open = False

    def open_registration(self) -> None:
        self.registration_open = True

    def close_registration(self) -> None:
        self.registration_open = False

    def create_tables(self) -> None:
        with self.lock:
            with self.conn:
                cursor = self.conn.cursor()
                cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    tg_user_id INTEGER UNIQUE,
                    username TEXT
                )
                ''')
                cursor.execute('''
                CREATE TABLE IF NOT EXISTS registrations (
                    registration_id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    event_time TEXT,
                    registration_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
                ''')
                self.conn.commit()

    def setup_handlers(self) -> None:
        @self.bot.message_handler(commands=['start'])
        def handle_start(message: Message):
            self.bot.reply_to(message, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.')

        @self.bot.message_handler(commands=['help'])
        def handle_help(message: Message):
            self.bot.reply_to(message, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                                       '/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n'
                                       '/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n'
                                       '/register <–í–∞—à –Ω–∏–∫> - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n'
                                       '/join <–í—Ä–µ–º—è> - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n'
                                       '/open <–î–∞—Ç–∞> [–ú–µ—Å—Ç–æ] [–í—Ä–µ–º—è] - –û—Ç–∫—Ä—ã—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n'
                                       '/clear - –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')

        @self.bot.message_handler(commands=['register'])
        def handle_register(message: Message):
            try:
                username = message.text.split(maxsplit=1)[1]
                self.register_user(message.from_user.id, username, message)
            except IndexError:
                self.bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register <–í–∞—à –Ω–∏–∫>.')

        @self.bot.message_handler(commands=['join'])
        def handle_join(message: Message):
            try:
                parts = message.text.split(maxsplit=1)
                if len(parts) == 1:
                    event_time = self.time
                else:
                    event_time = parts[1]
                self.register_for_event(message.from_user.id, event_time, message)
            except IndexError:
                self.bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /join <–í—Ä–µ–º—è>.')

        @self.bot.message_handler(commands=['open'])
        def handle_open(message: Message):
            try:
                data = message.text.split(maxsplit=1)[1]
                self.start_registration(data, message)
            except IndexError:
                self.bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /open <–î–∞—Ç–∞> [–ú–µ—Å—Ç–æ] [–í—Ä–µ–º—è].')

        @self.bot.message_handler(commands=['clear'])
        def handle_clear(message: Message):
            self.clear_registrations(message)

    def start_registration(self, data: str, message: Message) -> None:
        self.open_registration()
        data_list = data.split(' ')
        self.date = format_date_russian(data_list[0])
        if len(data_list) > 1:
            self.location = data_list[1]
        if len(data_list) > 2:
            self.time = data_list[2]
        self.bot.reply_to(message, f'{self.date}, –ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∞! üòé\n\nüïê {self.time}\nüó∫ {self.location}')

    def register_user(self, tg_user_id: int, username: str, message: Message) -> None:
        try:
            with self.lock:
                with self.conn:
                    cursor = self.conn.cursor()
                    cursor.execute('''
                    INSERT OR REPLACE INTO users (tg_user_id, username)
                    VALUES (?, ?)
                    ''', (tg_user_id, username.capitalize()))
                    self.conn.commit()
            self.bot.reply_to(message, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –Ω–∏–∫–æ–º {username.capitalize()}!')
        except sqlite3.Error as e:
            self.bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}')

    def register_for_event(self, tg_user_id: int, event_time: str, message: Message) -> None:
        try:
            with self.lock:
                with self.conn:
                    cursor = self.conn.cursor()
                    cursor.execute('''
                    SELECT user_id, username FROM users WHERE tg_user_id = ?
                    ''', (tg_user_id,))
                    user = cursor.fetchone()
                    if not self.registration_open:
                        self.bot.reply_to(message, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –∏–≥—Ä—ã.')
                        return
                    if user:
                        user_id, username = user
                        cursor.execute('''
                        INSERT INTO registrations (user_id, event_time)
                        VALUES (?, ?)
                        ''', (user_id, event_time))
                        self.conn.commit()

                        cursor.execute('''
                        SELECT u.username, r.event_time
                        FROM registrations r
                        JOIN users u ON r.user_id = u.user_id
                        ORDER BY r.registration_time
                        ''')
                        registrations = cursor.fetchall()

                        registration_list = '\n'.join(
                            [f'{i + 1}. {reg[0]}' + (f' {reg[1]}' if reg[1] != self.time else '') for i, reg in
                             enumerate(registrations)]
                        )

                        self.bot.reply_to(message,
                                          f'{self.date}, –ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∞! üòé\n\n{registration_list}\n\nüïê {self.time}\nüó∫ {self.location}')
                        if len(registrations) > 12:
                            self.close_registration()
                    else:
                        self.bot.reply_to(message, '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register <–í–∞—à –Ω–∏–∫>.')
        except sqlite3.Error as e:
            self.bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {e}')

    def clear_registrations(self, message: Message) -> None:
        try:
            with self.lock:
                with self.conn:
                    cursor = self.conn.cursor()
                    cursor.execute('DELETE FROM registrations')
                    self.conn.commit()
            self.bot.reply_to(message, '–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!')
        except sqlite3.Error as e:
            self.bot.reply_to(message, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {e}')

    def start_polling(self) -> None:
        print('Running telebot...')
        self.bot.polling()

    def stop(self) -> None:
        self.conn.close()


if __name__ == "__main__":
    TOKEN = '7489778031:AAFW7ZxD4H3wQcQ4rMmSOOFFzY_-4vRCeMg'
    bot = MafiaBot(TOKEN)
    try:
        bot.start_polling()
    except KeyboardInterrupt:
        bot.stop()
